{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nbs26\\\\Desktop\\\\Naor\\\\Jobs\\\\Full_Stack\\\\MisEda\\\\client\\\\src\\\\components\\\\register.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Form, useField } from 'formik';\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst MyTextInput = ({\n  label,\n  ...props\n}) => {\n  _s();\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"text-input\",\n      ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n};\n\n_s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c = MyTextInput;\n\nconst MyCheckbox = ({\n  children,\n  ...props\n}) => {\n  _s2();\n\n  const [field, meta] = useField({ ...props,\n    type: 'checkbox'\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"checkbox\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...field,\n        ...props,\n        type: \"checkbox\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}; // Styled components ....\n\n/* const StyledSelect = styled.select`\r\n  color: var(--blue);\r\n`;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: var(--red-600);\r\n  width: 400px;\r\n  margin-top: 0.25rem;\r\n  &:before {\r\n    content: '❌ ';\r\n    font-size: 10px;\r\n  }\r\n  @media (prefers-color-scheme: dark) {\r\n    color: var(--red-300);\r\n  }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-top: 1rem;\r\n`;\r\n */\n\n\n_s2(MyCheckbox, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c2 = MyCheckbox;\n\nconst MySelect = ({\n  label,\n  ...props\n}) => {\n  _s3();\n\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\n  const [field, meta] = useField(props);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledLabel, {\n      htmlFor: props.id || props.name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledSelect, { ...field,\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(StyledErrorMessage, {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true);\n}; // And now we can use these\n\n\n_s3(MySelect, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n  return [useField];\n});\n\n_c3 = MySelect;\n\nconst SignupForm = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Subscribe!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        acceptedTerms: false,\n        // added for our checkbox\n        jobType: '' // added for our select\n\n      },\n      validationSchema: Yup.object({\n        firstName: Yup.string().max(15, 'Must be 15 characters or less').required('Required'),\n        lastName: Yup.string().max(20, 'Must be 20 characters or less').required('Required'),\n        email: Yup.string().email('Invalid email addresss`').required('Required'),\n        acceptedTerms: Yup.boolean().required('Required').oneOf([true], 'You must accept the terms and conditions.'),\n        jobType: Yup.string() // specify the set of valid values for job type\n        // @see http://bit.ly/yup-mixed-oneOf\n        .oneOf(['designer', 'development', 'product', 'other'], 'Invalid Job Type').required('Required')\n      }),\n      onSubmit: async (values, {\n        setSubmitting\n      }) => {\n        await new Promise(r => setTimeout(r, 500));\n        setSubmitting(false);\n      },\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"First Name\",\n          name: \"firstName\",\n          type: \"text\",\n          placeholder: \"Jane\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Last Name\",\n          name: \"lastName\",\n          type: \"text\",\n          placeholder: \"Doe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n          label: \"Email Address\",\n          name: \"email\",\n          type: \"email\",\n          placeholder: \"jane@formik.com\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MySelect, {\n          label: \"Job Type\",\n          name: \"jobType\",\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select a job type\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"designer\",\n            children: \"Designer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"development\",\n            children: \"Developer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"product\",\n            children: \"Product Manager\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"other\",\n            children: \"Other\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MyCheckbox, {\n          name: \"acceptedTerms\",\n          children: \"I accept the terms and conditions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = SignupForm;\n\nfunction Register() {\n  return /*#__PURE__*/_jsxDEV(SignupForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 10\n  }, this);\n}\n\n_c5 = Register;\nexport default Register;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"MyTextInput\");\n$RefreshReg$(_c2, \"MyCheckbox\");\n$RefreshReg$(_c3, \"MySelect\");\n$RefreshReg$(_c4, \"SignupForm\");\n$RefreshReg$(_c5, \"Register\");","map":{"version":3,"sources":["C:/Users/nbs26/Desktop/Naor/Jobs/Full_Stack/MisEda/client/src/components/register.jsx"],"names":["React","useEffect","ReactDOM","Formik","Form","useField","Yup","MyTextInput","label","props","field","meta","id","name","touched","error","MyCheckbox","children","type","MySelect","SignupForm","firstName","lastName","email","acceptedTerms","jobType","object","string","max","required","boolean","oneOf","values","setSubmitting","Promise","r","setTimeout","Register"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,QAAvB,QAAuC,QAAvC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AAC3C;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBN,QAAQ,CAACI,KAAD,CAA9B;AACA,sBACE;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAlC;AAAA,gBAAyCL;AAAzC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,SAAkCE,KAAlC;AAAA,SAA6CD;AAA7C;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,gBACC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAAwBJ,IAAI,CAACI;AAA7B;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IALN;AAAA,kBADF;AASD,CAbD;;GAAMR,W;UAGkBF,Q;;;KAHlBE,W;;AAeN,MAAMS,UAAU,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAY,KAAGR;AAAf,CAAD,KAA4B;AAAA;;AAC7C,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBN,QAAQ,CAAC,EAAE,GAAGI,KAAL;AAAYS,IAAAA,IAAI,EAAE;AAAlB,GAAD,CAA9B;AACA,sBACE;AAAA,4BACE;AAAO,MAAA,SAAS,EAAC,UAAjB;AAAA,8BACE,sBAAWR,KAAX;AAAA,WAAsBD,KAAtB;AAA6B,QAAA,IAAI,EAAC;AAAlC;AAAA;AAAA;AAAA;AAAA,cADF,EAEGQ,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAKGN,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,gBACC;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,gBAAwBJ,IAAI,CAACI;AAA7B;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IAPN;AAAA,kBADF;AAWD,CAbD,C,CAeA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IArCMC,U;UACkBX,Q;;;MADlBW,U;;AAsCN,MAAMG,QAAQ,GAAG,CAAC;AAAEX,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAyB;AAAA;;AACxC;AACA;AACA,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBN,QAAQ,CAACI,KAAD,CAA9B;AACA,sBACE;AAAA,4BACE,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEA,KAAK,CAACG,EAAN,IAAYH,KAAK,CAACI,IAAxC;AAAA,gBAA+CL;AAA/C;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD,OAAkBE,KAAlB;AAAA,SAA6BD;AAA7B;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGE,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAArB,gBACC,QAAC,kBAAD;AAAA,gBAAqBJ,IAAI,CAACI;AAA1B;AAAA;AAAA;AAAA;AAAA,YADD,GAEG,IALN;AAAA,kBADF;AASD,CAbD,C,CAeA;;;IAfMI,Q;UAGkBd,Q;;;MAHlBc,Q;;AAgBN,MAAMC,UAAU,GAAG,MAAM;AACvB,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AACbC,QAAAA,SAAS,EAAE,EADE;AAEbC,QAAAA,QAAQ,EAAE,EAFG;AAGbC,QAAAA,KAAK,EAAE,EAHM;AAIbC,QAAAA,aAAa,EAAE,KAJF;AAIS;AACtBC,QAAAA,OAAO,EAAE,EALI,CAKA;;AALA,OADjB;AAQE,MAAA,gBAAgB,EAAEnB,GAAG,CAACoB,MAAJ,CAAW;AAC3BL,QAAAA,SAAS,EAAEf,GAAG,CAACqB,MAAJ,GACRC,GADQ,CACJ,EADI,EACA,+BADA,EAERC,QAFQ,CAEC,UAFD,CADgB;AAI3BP,QAAAA,QAAQ,EAAEhB,GAAG,CAACqB,MAAJ,GACPC,GADO,CACH,EADG,EACC,+BADD,EAEPC,QAFO,CAEE,UAFF,CAJiB;AAO3BN,QAAAA,KAAK,EAAEjB,GAAG,CAACqB,MAAJ,GACJJ,KADI,CACE,yBADF,EAEJM,QAFI,CAEK,UAFL,CAPoB;AAU3BL,QAAAA,aAAa,EAAElB,GAAG,CAACwB,OAAJ,GACZD,QADY,CACH,UADG,EAEZE,KAFY,CAEN,CAAC,IAAD,CAFM,EAEE,2CAFF,CAVY;AAa3BN,QAAAA,OAAO,EAAEnB,GAAG,CAACqB,MAAJ,GACP;AACA;AAFO,SAGNI,KAHM,CAIL,CAAC,UAAD,EAAa,aAAb,EAA4B,SAA5B,EAAuC,OAAvC,CAJK,EAKL,kBALK,EAONF,QAPM,CAOG,UAPH;AAbkB,OAAX,CARpB;AA8BE,MAAA,QAAQ,EAAE,OAAOG,MAAP,EAAe;AAAEC,QAAAA;AAAF,OAAf,KAAqC;AAC7C,cAAM,IAAIC,OAAJ,CAAaC,CAAD,IAAOC,UAAU,CAACD,CAAD,EAAI,GAAJ,CAA7B,CAAN;AACAF,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAjCH;AAAA,6BAmCE,QAAC,IAAD;AAAA,gCACE,QAAC,WAAD;AACE,UAAA,KAAK,EAAC,YADR;AAEE,UAAA,IAAI,EAAC,WAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBADF,eAOE,QAAC,WAAD;AACE,UAAA,KAAK,EAAC,WADR;AAEE,UAAA,IAAI,EAAC,UAFP;AAGE,UAAA,IAAI,EAAC,MAHP;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAPF,eAaE,QAAC,WAAD;AACE,UAAA,KAAK,EAAC,eADR;AAEE,UAAA,IAAI,EAAC,OAFP;AAGE,UAAA,IAAI,EAAC,OAHP;AAIE,UAAA,WAAW,EAAC;AAJd;AAAA;AAAA;AAAA;AAAA,gBAbF,eAmBE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAC,UAAhB;AAA2B,UAAA,IAAI,EAAC,SAAhC;AAAA,kCACE;AAAQ,YAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAQ,YAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAQ,YAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAQ,YAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAQ,YAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBF,eA0BE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1BF,eA8BE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA9BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAnCF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAyED,CA1ED;;MAAMb,U;;AA4EN,SAASiB,QAAT,GAAoB;AAClB,sBAAO,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;MAFQA,Q;AAIT,eAAeA,QAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Formik, Form, useField } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst MyTextInput = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <label htmlFor={props.id || props.name}>{label}</label>\r\n      <input className=\"text-input\" {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nconst MyCheckbox = ({ children, ...props }) => {\r\n  const [field, meta] = useField({ ...props, type: 'checkbox' });\r\n  return (\r\n    <>\r\n      <label className=\"checkbox\">\r\n        <input {...field} {...props} type=\"checkbox\" />\r\n        {children}\r\n      </label>\r\n      {meta.touched && meta.error ? (\r\n        <div className=\"error\">{meta.error}</div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n// Styled components ....\r\n/* const StyledSelect = styled.select`\r\n  color: var(--blue);\r\n`;\r\n\r\nconst StyledErrorMessage = styled.div`\r\n  font-size: 12px;\r\n  color: var(--red-600);\r\n  width: 400px;\r\n  margin-top: 0.25rem;\r\n  &:before {\r\n    content: '❌ ';\r\n    font-size: 10px;\r\n  }\r\n  @media (prefers-color-scheme: dark) {\r\n    color: var(--red-300);\r\n  }\r\n`;\r\n\r\nconst StyledLabel = styled.label`\r\n  margin-top: 1rem;\r\n`;\r\n */\r\nconst MySelect = ({ label, ...props }) => {\r\n  // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\r\n  // which we can spread on <input> and alse replace ErrorMessage entirely.\r\n  const [field, meta] = useField(props);\r\n  return (\r\n    <>\r\n      <StyledLabel htmlFor={props.id || props.name}>{label}</StyledLabel>\r\n      <StyledSelect {...field} {...props} />\r\n      {meta.touched && meta.error ? (\r\n        <StyledErrorMessage>{meta.error}</StyledErrorMessage>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n// And now we can use these\r\nconst SignupForm = () => {\r\n  return (\r\n    <>\r\n      <h1>Subscribe!</h1>\r\n      <Formik\r\n        initialValues={{\r\n          firstName: '',\r\n          lastName: '',\r\n          email: '',\r\n          acceptedTerms: false, // added for our checkbox\r\n          jobType: '', // added for our select\r\n        }}\r\n        validationSchema={Yup.object({\r\n          firstName: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n          lastName: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n          email: Yup.string()\r\n            .email('Invalid email addresss`')\r\n            .required('Required'),\r\n          acceptedTerms: Yup.boolean()\r\n            .required('Required')\r\n            .oneOf([true], 'You must accept the terms and conditions.'),\r\n          jobType: Yup.string()\r\n            // specify the set of valid values for job type\r\n            // @see http://bit.ly/yup-mixed-oneOf\r\n            .oneOf(\r\n              ['designer', 'development', 'product', 'other'],\r\n              'Invalid Job Type'\r\n            )\r\n            .required('Required'),\r\n        })}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise((r) => setTimeout(r, 500));\r\n          setSubmitting(false);\r\n        }}\r\n      >\r\n        <Form>\r\n          <MyTextInput\r\n            label=\"First Name\"\r\n            name=\"firstName\"\r\n            type=\"text\"\r\n            placeholder=\"Jane\"\r\n          />\r\n          <MyTextInput\r\n            label=\"Last Name\"\r\n            name=\"lastName\"\r\n            type=\"text\"\r\n            placeholder=\"Doe\"\r\n          />\r\n          <MyTextInput\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"jane@formik.com\"\r\n          />\r\n          <MySelect label=\"Job Type\" name=\"jobType\">\r\n            <option value=\"\">Select a job type</option>\r\n            <option value=\"designer\">Designer</option>\r\n            <option value=\"development\">Developer</option>\r\n            <option value=\"product\">Product Manager</option>\r\n            <option value=\"other\">Other</option>\r\n          </MySelect>\r\n          <MyCheckbox name=\"acceptedTerms\">\r\n            I accept the terms and conditions\r\n          </MyCheckbox>\r\n\r\n          <button type=\"submit\">Submit</button>\r\n        </Form>\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction Register() {\r\n  return <SignupForm />;\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}